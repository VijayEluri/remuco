#!/usr/bin/python

# =============================================================================
#
#    Remuco - A remote control system for media players.
#    Copyright (C) 2006-2009 by the Remuco team, see AUTHORS.
#
#    This file is part of Remuco.
#
#    Remuco is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Remuco is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Remuco.  If not, see <http://www.gnu.org/licenses/>.
#
# =============================================================================

"""Amarok1.4 adapter for Remuco, implemented as an executable script."""

import time
import commands
import os
import eyeD3


import remuco
from remuco import log

#Definitions
IA_JUMP = remuco.ItemAction("Jump to")
IA_REMOVE = remuco.ItemAction("Remove", multiple=True)
PLAYLIST_ACTIONS = (IA_JUMP, IA_REMOVE)

class Amarok14Adapter(remuco.PlayerAdapter):
    
    lastpath = ""
    
    def __init__(self):
        
        remuco.PlayerAdapter.__init__(self, "Amarok 1.4",
                                      playback_known=True,
                                      volume_known=True,
                                      progress_known=True,
                                      shuffle_known=True,
                                      repeat_known=True,
                                      mime_types=("audio",),
                                      max_rating=10,
                                      poll=10
        )
        
    def start(self):
        
        remuco.PlayerAdapter.start(self)

        log.debug("here we go")
        
    def stop(self):
        
        remuco.PlayerAdapter.stop(self)

        log.debug("bye, turning off the light")
    
    
    def poll(self):
        
        import random
        
        current_state =  commands.getoutput("dcop amarok player randomModeStatus")
        if(current_state == "true"):
            self.update_shuffle(True)
        else:
            self.update_shuffle(False)

        current_state = commands.getoutput("dcop amarok player repeatPlaylistStatus")
        if(current_state == "true"):
            self.update_repeat(True)
        else:
            self.update_repeat(False)

        volume = commands.getoutput("dcop amarok player getVolume")
        self.update_volume(volume)

        playing = commands.getoutput("dcop amarok player isPlaying")
        if playing == "true":
            self.update_playback(remuco.PLAYBACK_PLAY)
        else:
            self.update_playback(remuco.PLAYBACK_PAUSE)
            
        #~ Get and calculate total time and progress
        current = commands.getoutput("dcop amarok player currentTime")
        if(len(current.split(":")) == 2):
            cmin, csec = current.split(":")
        else:
            cmin, csec = 0,0
            
        total = commands.getoutput("dcop amarok player totalTime")
        if(len(total.split(":")) == 2):
            tmin, tsec = total.split(":")
        else:
            tmin, tsec = 0,0
            
        cmin, csec, tmin, tsec = int(cmin), int(csec), int(tmin), int(tsec)
        current = (cmin*60)+csec
        total = (tmin*60)+tsec
        self.update_progress(progress=current, length=total)
        
        if(self.lastpath != commands.getoutput("dcop amarok player path")):
        
            info = {}
            info[remuco.INFO_ARTIST] = commands.getoutput("dcop amarok player artist")
            info[remuco.INFO_ALBUM] = commands.getoutput("dcop amarok player album")
            info[remuco.INFO_TITLE] = commands.getoutput("dcop amarok player title")
            info[remuco.INFO_GENRE] = commands.getoutput("dcop amarok player genre")
            info[remuco.INFO_YEAR] = commands.getoutput("dcop amarok player year")
            info[remuco.INFO_BITRATE] = int(commands.getoutput("dcop amarok player bitrate"))
            info[remuco.INFO_RATING] = commands.getoutput("dcop amarok player rating")
            
            path = commands.getoutput("dcop amarok player path")
            self.update_item("", info, self.find_image(path, True))
            self.lastpath = path

        
    # =========================================================================
    # control interface
    # =========================================================================
    
    def ctrl_rate(self, rate):
        os.system("dcop amarok player setRating " + str(rate))
    
    def ctrl_volume(self, direction):
        current = int(commands.getoutput("dcop amarok player getVolume"))
        if(direction == 1 ):
            os.system("dcop amarok player setVolume "+str(current+10))
        elif(direction == -1):
            os.system("dcop amarok player setVolume "+str(current-10))
        elif(direction == 0):
            os.system("dcop amarok player mute")
        

    def ctrl_toggle_shuffle(self):
        current_state =  commands.getoutput("dcop amarok player randomModeStatus")
        if(current_state == "true"):
            os.system("dcop amarok player enableRandomMode false")
            self.update_shuffle(False)
        else:
            os.system("dcop amarok player enableRandomMode true")
            self.update_shuffle(True)
    
    def ctrl_toggle_repeat(self):
        current_state = commands.getoutput("dcop amarok player repeatPlaylistStatus")
        if(current_state == "true"):
            os.system("dcop amarok player enableRepeatPlaylist false")
            self.update_repeat(False)
        else:
            os.system("dcop amarok player enableRepeatPlaylist true")
            self.update_repeat(True)
            
    
    def ctrl_toggle_playing(self):
        os.system("dcop amarok player playPause")
        
    def ctrl_next(self):
        os.system("dcop amarok player next")
        time.sleep(0.15)
        self.poll()
        
    def ctrl_previous(self):
        os.system("dcop amarok player prev")
        time.sleep(0.15)
        self.poll()
        
    # =========================================================================
    # request interface
    # =========================================================================
    
    def request_playlist(self, reply):
        os.system("dcop amarok playlist saveM3u ./current.m3u false")
        f = open("current.m3u")
        list = {}
        ids = {}
        tag = eyeD3.Tag()
        while 1:
            line = f.readline()
            if not line: break
            
            if line.find("#") == -1:
                tag.link(line.rstrip())
                reply.ids.append(len(reply.names))
                reply.names.append(tag.getArtist() + " - " + tag.getTitle())
                
        f.close
        reply.item_actions = PLAYLIST_ACTIONS
        reply.send()

    # =========================================================================
    # Actions
    # =========================================================================
    
    def action_playlist_item(self, action_id, positions, ids):
        if(action_id == IA_JUMP.id):
            os.system("dcop amarok playlist playByIndex " + str(positions[0]))
        elif(action_id == IA_REMOVE.id):
            for i, v in enumerate(positions):
                os.system("dcop amarok playlist removeByIndex " + str(v))
        else:
            print "Unknown action" + str(action_id)

    
# =============================================================================
# main (example startup using remuco.Manager)
# =============================================================================

if __name__ == '__main__':
    
    pa = Amarok14Adapter() # create the player adapter
    mg = remuco.Manager(pa)# # pass it to a manager
    mg.run() # run the manager (blocks until interrupt signal)
