/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_rem_pp
#define DBUS_GLIB_CLIENT_WRAPPERS_rem_pp

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
rem_pp_control (DBusGProxy *proxy, const guint IN_control, const gint IN_param_i, const char * IN_param_s, GError **error)

{
  return dbus_g_proxy_call (proxy, "Control", error, G_TYPE_UINT, IN_control, G_TYPE_INT, IN_param_i, G_TYPE_STRING, IN_param_s, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*rem_pp_control_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
rem_pp_control_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(rem_pp_control_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
rem_pp_control_async (DBusGProxy *proxy, const guint IN_control, const gint IN_param_i, const char * IN_param_s, rem_pp_control_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Control", rem_pp_control_async_callback, stuff, g_free, G_TYPE_UINT, IN_control, G_TYPE_INT, IN_param_i, G_TYPE_STRING, IN_param_s, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
rem_pp_request_plob (DBusGProxy *proxy, const char * IN_id, GHashTable** OUT_meta, GError **error)

{
  return dbus_g_proxy_call (proxy, "RequestPlob", error, G_TYPE_STRING, IN_id, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), OUT_meta, G_TYPE_INVALID);
}

typedef void (*rem_pp_request_plob_reply) (DBusGProxy *proxy, GHashTable *OUT_meta, GError *error, gpointer userdata);

static void
rem_pp_request_plob_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_meta;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), &OUT_meta, G_TYPE_INVALID);
  (*(rem_pp_request_plob_reply)data->cb) (proxy, OUT_meta, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
rem_pp_request_plob_async (DBusGProxy *proxy, const char * IN_id, rem_pp_request_plob_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RequestPlob", rem_pp_request_plob_async_callback, stuff, g_free, G_TYPE_STRING, IN_id, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
rem_pp_request_ploblist (DBusGProxy *proxy, const char * IN_id, char *** OUT_nested_ids, char *** OUT_nested_names, char *** OUT_ids, char *** OUT_names, GError **error)

{
  return dbus_g_proxy_call (proxy, "RequestPloblist", error, G_TYPE_STRING, IN_id, G_TYPE_INVALID, G_TYPE_STRV, OUT_nested_ids, G_TYPE_STRV, OUT_nested_names, G_TYPE_STRV, OUT_ids, G_TYPE_STRV, OUT_names, G_TYPE_INVALID);
}

typedef void (*rem_pp_request_ploblist_reply) (DBusGProxy *proxy, char * *OUT_nested_ids, char * *OUT_nested_names, char * *OUT_ids, char * *OUT_names, GError *error, gpointer userdata);

static void
rem_pp_request_ploblist_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_nested_ids;
  char ** OUT_nested_names;
  char ** OUT_ids;
  char ** OUT_names;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_nested_ids, G_TYPE_STRV, &OUT_nested_names, G_TYPE_STRV, &OUT_ids, G_TYPE_STRV, &OUT_names, G_TYPE_INVALID);
  (*(rem_pp_request_ploblist_reply)data->cb) (proxy, OUT_nested_ids, OUT_nested_names, OUT_ids, OUT_names, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
rem_pp_request_ploblist_async (DBusGProxy *proxy, const char * IN_id, rem_pp_request_ploblist_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RequestPloblist", rem_pp_request_ploblist_async_callback, stuff, g_free, G_TYPE_STRING, IN_id, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
rem_pp_bye (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Bye", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*rem_pp_bye_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
rem_pp_bye_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(rem_pp_bye_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
rem_pp_bye_async (DBusGProxy *proxy, rem_pp_bye_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Bye", rem_pp_bye_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_rem_pp */

G_END_DECLS
