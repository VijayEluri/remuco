# =============================================================================
# Tools
# =============================================================================

# You do not need all of the tools listed here. Read the 'Needed if:' comments
# to check which tools you need to configure here.
#
# See 'setup.sh' for automatically setup the client build environment.

# Home of Sun's WTK.
# Download: http://java.sun.com/products/sjwtoolkit/
# Required version: >= 2.5.2
# Needed if:
#    - option 'dist.preverifier' is set to 'wtk'
#    - option 'run.preverifier' is set to 'wtk'
#    - WTK libraries are used below in section 'API libs'
wtk.home=${basedir}/tools/wtk-2.5.2

# Home of MicroEmu.
# Download: http://www.microemu.org/
# Required version: >= 2.0.3
# Needed if:
#    - target 'run.microemu' gets called
#    - MicroEmu libraries are used below in section 'API libs'
microemu.home=${basedir}/tools/microemulator-2.0.3

# BlueCove JAR
# Download: http://bluecove.org/
# Required version: >= 2.1
# Needed if:
#    - target 'run.microemu' gets called and Bluetooth shall be enabled
microemu.bluecove.jar=${basedir}/tools/bluecove/bluecove-2.1.0.jar
# Additionally needed on systems with a BlueZ stack:
microemu.bluecove-gpl.jar=${basedir}/tools/bluecove/bluecove-gpl-2.1.0.jar

# ProGuard JAR (containing the ProGuard Ant task)
# Download: http://proguard.sourceforge.net/
# Required version: >= 4.2
# Needed if:
#    - the option 'dist.preverifier' is set to 'proguard'
#    - the option 'run.preverifier' is set to 'proguard'
proguard.jar=${basedir}/tools/proguard4.2/lib/proguard.jar

# =============================================================================
# API libs
# =============================================================================

# Use WTK libraries for building:
#midp.jar=${wtk.home}/lib/midpapi20.jar
#cldc.jar=${wtk.home}/lib/cldcapi11.jar
#jsr82.jar=${wtk.home}/lib/jsr082.jar

# Use MicroEmu libraries for building:
midp.jar=${microemu.home}/lib/midpapi20.jar
cldc.jar=${microemu.home}/lib/cldcapi11.jar
jsr82.jar=${microemu.home}/lib/microemu-jsr-82.jar

# =============================================================================
# Configurations for targets 'dist'
# =============================================================================

# The preverifier to use.
#dist.preverifier=wtk
dist.preverifier=proguard

# Whether to include debug symbols in the byte code or not.
#dist.debug=yes
dist.debug=no

# Whether to optimize and obfuscate the byte code when using ProGuard.
#dist.proguard.optimize=no
dist.proguard.optimize=yes

# Size of the application logo.
# Possible values: 12, 16, 24, 32, 48
logo.size=12

# =============================================================================
# Configurations for targets 'run', 'run.wtk' and 'run.microemu'
# =============================================================================

# Default emulator to use for the 'run' target.
#run.emulator=wtk
run.emulator=microemu

# The preverifier to use.
#run.preverifier=wtk
run.preverifier=proguard

# Whether to include debug symbols in the byte code or not.
#run.debug=no
run.debug=yes

# Whether to optimize and obfuscate the byte code when using ProGuard.
# Set this to 'no' to get readable stack traces.
#run.proguard.optimize=yes
run.proguard.optimize=no

# Device to use when emulating with WTK.
run.emulator.wtk.device=DefaultColorPhone
#run.emulator.wtk.device=DefaultGrayPhone
#run.emulator.wtk.device=MediaControlSkin
#run.emulator.wtk.device=QwertyDevice

# Security domain to use when emulating with WTK.
#run.emulator.wtk.domain=untrusted
#run.emulator.wtk.domain=trusted
#run.emulator.wtk.domain=minimum
run.emulator.wtk.domain=maximum

# Device to use when emulating with MicroEmu.
#run.emulator.microemu.device=default
run.emulator.microemu.device=large
#run.emulator.microemu.device=minimum
#run.emulator.microemu.device=resizable
