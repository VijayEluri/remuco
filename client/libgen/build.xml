<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Aug 2, 2009 9:36:14 PM                                                        

     J2ME Library Generator
         
     This build script creates the libraries needed to build the Remuco client,
     based solely on API signature files (midp-20.xml, cldc-11.xml and
     jsr-82.xml).
            
     This build script requires Ant >= 1.7 and Ant's optional tasks!
                   
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
     Author(s): Oben Sonne

     ====================================================================== -->
<project name="J2ME Library Generator" default="build">

	<description>
        This build script creates the libraries needed to build the Remuco client,
        based solely on API signature files (midp-20.xml, cldc-11.xml and
        jsr-82.xml).
    </description>

	<property name="tools.dir" value="../tools" />

	<!-- ================================= 
          target: default              
         ================================= -->


	<target name="source">
		<mkdir dir="sources/${component}" />
		<exec executable="python">
			<arg value="api.py" />
			<arg value="${component}.xml" />
			<arg value="sources/${component}" />
		</exec>
	</target>


	<target name="build.component">
		<antcall target="source">
			<param name="component" value="${component}" />
		</antcall>
		<mkdir dir="build/${component}" />
		<javac destdir="build/${component}"
		       target="1.1"
		       source="1.3"
		       debug="yes"
		       classpath="${classpath}"
		       verbose="no">
			<!-- sources -->
			<src path="sources/${component}" />
		</javac>
		<mkdir dir="jar" />
		<jar destfile="jar/${component}.jar">
			<fileset dir="build/${component}" />
		</jar>
	</target>

	<target name="build" depends="clean" description="--> build libs">
		<antcall target="build.component">
			<param name="component" value="cldc-11" />
			<param name="classpath" value="" />
		</antcall>
		<antcall target="build.component">
			<param name="component" value="midp-20" />
			<param name="classpath" value="jar/cldc-11.jar" />
		</antcall>
		<antcall target="build.component">
			<param name="component" value="jsr-82" />
			<param name="classpath"
			       value="jar/cldc-11.jar${path.separator}jar/midp-20.jar" />
		</antcall>
	</target>


	<target name="clean" description="--> clean build files">
		<delete dir="sources" />
		<delete dir="build" />
		<delete dir="jar" />
	</target>

	<target name="setup"
	        depends="build"
	        description="--> setup the client build environment using the libraries generated by taget 'build' and a ProGuard location given by property 'proguard.jar'">
		<fail unless="proguard.jar"
		      message="property 'proguard.jar' needs to be set" />
		<copy file="../build.properties.example" tofile="../build.properties" />
		<replaceregexp file="../build.properties"
		               flags="m"
		               match="^midp.jar=.*$"
		               replace="midp.jar=libgen/jar/midp-20.jar" />
		<replaceregexp file="../build.properties"
		               flags="m"
		               match="^cldc.jar=.*$"
		               replace="cldc.jar=libgen/jar/cldc-11.jar" />
		<replaceregexp file="../build.properties"
		               flags="m"
		               match="^jsr82.jar=.*$"
		               replace="jsr82.jar=libgen/jar/jsr-82.jar" />
		<replaceregexp file="../build.properties"
		               flags="m"
		               match="^proguard.jar=.*$"
		               replace="proguard.jar=${proguard.jar}" />
	</target>

</project>
