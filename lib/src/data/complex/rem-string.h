#ifndef REMSTRPAR_H_
#define REMSTRPAR_H_

///////////////////////////////////////////////////////////////////////////////
//
// includes
//
///////////////////////////////////////////////////////////////////////////////

#include <remuco.h>

///////////////////////////////////////////////////////////////////////////////
//
// types
//
///////////////////////////////////////////////////////////////////////////////

typedef struct {
	gchar	*value;
} RemString;

///////////////////////////////////////////////////////////////////////////////
//
// working with sctrl
//
///////////////////////////////////////////////////////////////////////////////

#define rem_strpar_new()	g_slice_new0(RemString);

#define rem_string_destroy(_sp) if (_sp) {	\
	 if ((_sp)->value)						\
	 	g_free((_sp)->value);				\
	 g_slice_free(RemString, _sp);			\
}

///////////////////////////////////////////////////////////////////////////////
//
// serialization
//
///////////////////////////////////////////////////////////////////////////////

GByteArray*
rem_string_serialize(const RemString *sp,
					 const gchar *ef,
					 const RemStringList *pte);

RemString*
rem_string_unserialize(const GByteArray *ba, const gchar *te);

#endif /*REMSTRPAR_H_*/
