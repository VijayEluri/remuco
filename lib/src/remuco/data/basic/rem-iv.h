#ifndef REMDATAIV_H_
#define REMDATAIV_H_

///////////////////////////////////////////////////////////////////////////////
//
// Includes
//
///////////////////////////////////////////////////////////////////////////////

#include "../../util/rem-common.h"

///////////////////////////////////////////////////////////////////////////////
//
// type definitions
//
///////////////////////////////////////////////////////////////////////////////

typedef struct {
	guint l;
	gint32 *v;
} rem_iv_t;

///////////////////////////////////////////////////////////////////////////////
//
// working with integer vectors
//
///////////////////////////////////////////////////////////////////////////////

rem_iv_t*
rem_iv_new(void);

rem_iv_t*
rem_iv_new_with_values(const gint32 *vals, guint num);

void
rem_iv_append(rem_iv_t *iv, gint32 i);

void
rem_iv_clear(rem_iv_t *iv);

void
rem_iv_destroy(rem_iv_t *iv);

///////////////////////////////////////////////////////////////////////////////
//
// serialization
//
///////////////////////////////////////////////////////////////////////////////

#ifdef REM_NEED_SERIALIZATION_FUNCTIONS

GByteArray*
rem_iv_serialize(const rem_iv_t *iv);

rem_iv_t*
rem_iv_unserialize(const GByteArray *ba);

#endif

///////////////////////////////////////////////////////////////////////////////
//
// debug
//
///////////////////////////////////////////////////////////////////////////////

void
rem_iv_dump(const rem_iv_t *iv);

gboolean
rem_iv_assert_equals(rem_iv_t *iv1, rem_iv_t *iv2);

#endif /*REMDATAIV_H_*/
