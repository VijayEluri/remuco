#ifndef REMSCTRL_H_
#define REMSCTRL_H_

///////////////////////////////////////////////////////////////////////////////
//
// includes
//
///////////////////////////////////////////////////////////////////////////////

#include <remuco.h>
#include "../../util/rem-util.h"
#include "../basic/rem-sl.h"

///////////////////////////////////////////////////////////////////////////////
//
// types
//
///////////////////////////////////////////////////////////////////////////////

typedef struct {
	gint32	cmd;
	gint32	param;
} RemSimpleControl;

///////////////////////////////////////////////////////////////////////////////
//
// working with sctrl
//
///////////////////////////////////////////////////////////////////////////////

#define rem_simple_control_new() g_slice_new0(RemSimpleControl)

#define rem_simple_control_destroy(_sctrl) \
	if (_sctrl) g_slice_free(RemSimpleControl, _sctrl)

///////////////////////////////////////////////////////////////////////////////
//
// serialization
//
///////////////////////////////////////////////////////////////////////////////

GByteArray*
rem_simple_control_serialize(const RemSimpleControl *sctrl,
							 const gchar *se,
		    				 const RemStringList *pte);

RemSimpleControl*
rem_simple_control_unserialize(const GByteArray *ba, const gchar *te);

#endif /*REMSCTRL_H_*/
